t <- (sample(v))
t
t[25]
t[1:25]
t <- t[1:25]
r
t
t.test(t)
plot(t)
plot(t, type="l")
?t.test(t)
?data
data
t.test(t)
r <- sample(v)
r <- r[1:25]
t.test(t,r)
t.test(t,r, alternative = "greater")
boxplot(t,r)
t.test(t,r)
t <- c(69,79,89,99,109)
sd(t)
t.test(t)
runif(5,sd(15))
runif(1:5,sd(15))
?rnorm
rnorm(5,sd=15)
r <- rnorm(5,sd=15)
t.test(r,t)
N1 <- c('white', 'pink', 'blue')
N1 <- c('white', 'pink', 'blue')
print(N1)
length(N1)
typeof(N1)
class(N1)
N2 <- c(15L,20L,25L)
print(N2)
length(N2)
typeof(N2)
class(N2)
N3 <- c(15,20,25)
print(N3
length(N3)
typeof(N3)
class(N3)
N3 <- c(15,20,25)
print(N3)
length(N3)
typeof(N3)
class(N3)
N4 <- c(TRUE,FALSE,FALSE,TRUE)
print(N4)
length(N4)
typeof(N4)
class(N4)
N5 <- c(2+3i, 4+6i, 8+9i)
print(N5)
length(N5)
typeof(N5)
class(N5)
N6 <- charToRaw('Hello')
N6 <- charToRaw('Hello')
print(N6)
length(N6)
typeof(N6)
class(N6)
v <- 1:10
print(v)
v <- 3.8:11.4
print(v)
print(seq(3.8,11.4, by = 0.4))
t <- c("Sun","Mon","Tue","Wed","Thurs","Fri", "Sat")
print(t[1])
print(t[7])
print(t[1:3])
print(t[-1])
u <- t[c(2,3,6)]
print(u)
v <- t[c(TRUE, FALSE, FALSE, FALSE,FALSE,TRUE,FALSE)]
print(v)
v <- t[c(T,F,T)]
print(v)
y <- t[c(0,0,0,0,0,0,1)]
print(y)
#Single Element Update
v1 <- c(23,45,67,89,76)
v1[3] <- 101 # Update data at index 3
print(v1)
v1[2:4] <- 100
print(v1)
v1[-3] <- 101  #	Except index 3 update all
print(v1)
v[2:4] <- c(1,2,3)
v1[2:4] <- c(1,2,3)
print(v1)
V1[3] <- NA	 # Update with NA
v1[3] <- NA	 # Update with NA
print(v1)
list_data <- list("Red", "Green", 	c(21,32,11), TRUE, 51.23, 119.1)
print(list_data)
class(list_data)
print(list_data[[1]])
print(list_data[1])
print(list_data[[3]])
print(list_data[[3]][2])
#Naming a List
list_data <- list(c("Jan","Feb","Mar"), matrix(c(3,9,5,1,-2,8),nrow = 2), list("green",12.3))
print(list_data)
#Give names to the elements in the list.
names(list_data) <- c("1st Quarter", "A_Matrix", "A Inner list")
print(list_data)
list_data$`1st Quarter`
#Updating a List
list_data[[3]] <- "updated element"
print(list_data[3])
#Deleting a List Element
list_data <- list_data[-4]
print(list_data)
#Deleting a List Element
list_data <- list_data[[-3]]
#Deleting a List Element
list_data <- list_data[-3]
print(list_data)
list_data[1] <- NULL
print(list_data)
#Merging a List
# Create two lists.
list1 <- list(1,2,3)
list2 <- list("Sun","Mon","Tue")
# Merge the two lists.
merged.list <- c(list1,list2)
# Print the merged list.
print(merged.list)
n <- "Hello"
print(n)
class(n)
n <- c(list(1,2,3),1,matrix1)
print(n)
n <- c(matrix1,list(1,2,3),1)
print(n)
# Create lists.
list1 <- list(1:5)
list2 <-list(10:14)
# Convert the lists to vectors.
v1 <- unlist(list1)
v2 <- unlist(list2)
# Now add the vectors
result <- v1+v2
print(result)
#Elements are arranged sequentially by row.
M <- matrix(c(3:14), ncol=3, nrow = 4, byrow = TRUE)
print(M)
#Elements are arranged sequentially by column.
N <- matrix(c(3:14), nrow = 4, byrow = FALSE)
print(N)
rownames = c("row1", "row2", "row3", "row4")
colnames = c("col1", "col2", "col3")
P <- matrix(c(3:14), nrow = 4, byrow = TRUE, dimnames = list(rownames, colnames))
print(P)
print(P[1,3])
print(P['row1','col3'])
print(P[2,])
print(P[,3])
#Create two vectors of different length
vector1 <- c(5,9,3)
vector2 <- c(10,11,12,13,14,15)
result <- array(c(vector1, vector2),dim = c(3,3,2))
print(result)
result[,,1]
result[2,2,1]
result[,,1][2,2]
vector1 <- c(5,9,3)
vector2 <- c(10,11,12,13,14,15)
col <- c("COL1","COL2","COL3")
row <- c("ROW1","ROW2","ROW3")
mat <- c("Matrix1","Matrix2")
result <- array(c(vector1,vector2), dim = c(3,3,2), dimnames = list(row, col,mat))
print(result)
#Create two vectors of different lengths.
vector1 <- c(9,1,0)
vector2 <- c(6,0,11,3,14,1,2,6,9)
array1 <- array(c(vector1,vector1), dim = c(3,3,2))
vector3 <- c(9,1,0)
vector4 <- c(6,0,11,3,14,1,2,6,9)
array2 <- array(c(vector3,vector4), dim = c(3,3,2))
matrix1 <- array1[,,2]
matrix2 <- array2[,,2]
print(class(matrix1))
result <- matrix1+matrix2
print(result)
data <- c("East","West", "East","North", "North","East", "West","West",
"West","East", "North")
print(data)
factor_data <- factor(data)
print(factor_data)
nlevels(factor_data)
#Reorder the levels
new_order_data <- factor(factor_data,levels = c("East","West","North"))
print(new_order_data)
print(v)
#Generating factor levels
#Syntax: gl(n, k, labels)
v <- gl(3, 4, labels = c("Tampa", "Seattle","Boston"))
print(v)
emp.data <- data.frame( emp_id = c (1:5),
emp_name = c("Rick", "Dan", "Michelle","Ryan","Gary"),
salary = c(623.3, 515.2, 611.0, 729.0,843.25),
start_date = as.Date( c("2012-01-01","2013-09-23","2014-11-15","2014-05-11","2015-03-27")),
stringsAsFactors = FALSE)
# Print the data frame.
print(emp.data)
str(emp.data)
summary(emp.data)
quantile(emp.data$emp_id,0.1)
ncol(emp.data)
nrow(emp.data)
dim(emp.data)
attributes(emp.data)
print(emp.data$emp_name)
print(emp.data[1:2,])
result <- emp.data[c(3,5),c(2,4)]
print(result)
#Add the "dept" coulmn.
emp.data$dept <- c('IT' , 'Operations' , 'IT' ,'HR', 'Finance')
print(emp.data)
emp.newdata <- data.frame(
emp_id = c (6:8),
emp_name = c("Rasmi","Pranab","Tusar"),
salary = c(578.0,722.5,632.8),
start_date = as.Date(c("2013-05-21","2013-07-30","2014-06-17")),
dept = c("IT","Operations","Finance"),
stringsAsFactors = FALSE
)
# Bind the two data frames.
emp.finaldata <- rbind(emp.data,emp.newdata)
print(emp.finaldata)
city <-c("Tampa", "Seattle","Hartford", "Denver")
state <- c("FL","WA","CT","CO")
zipcode <- c(33602,98104,06161,80294)
addresses <- cbind(city,state,zipcode)
print(addresses)
new.address <- data.frame(city = c("Lowry","Charlotte"),
state = c("CO","FL"),
zipcode = c("80230","33949"),
stringsAsFactors = FALSE)
Final <- rbind(addresses,new.address)
print(Final)
is.data.frame(Final)
limbs <- c(4, 3, 4, 3, 2, 4, 4, 4)
names(limbs) <- c('One-Eye', 'Peg-Leg', 'Smitty', 'Hook', 'Scooter',
'Dan', 'Mikey', 'Jack Sparrow')
print(limbs)
#An average closer to 4 would be nice, but this will have to do.
mean(limbs)
## Here's a barplot of that vector:
barplot(limbs)
## The abline function can take an h parameter with a value at which to draw a horizontal line,
## or a v parameter for a vertical line. When it's called, it updates the previous plot.
abline(h=mean(limbs))
limbs <- c(4, 3, 4, 3, 2, 4, 4, 14)
names(limbs) <- c('One-Eye', 'Peg-Leg', 'Smitty', 'Hook','Scooter', 'Dan',
'Mikey', 'Davy Jones')
mean(limbs)
barplot(limbs)
## It may be factually accurate to say that our crew has an average of 4.75 limbs,
## but it's probably also misleading.
abline(h=mean(limbs))
median(limbs)
abline(h=median(limbs))
pounds <- c(45000, 50000, 35000, 40000, 35000, 45000, 10000, 15000)
names(pounds) <- c('One-Eye', 'Peg-Leg','Hook','Scooter','Davy',
'Mikey','Smitty', 'Dan')
print(pounds)
barplot(pounds)
## Let's see a plot showing the mean value:
meanValue <- mean(pounds)
print(meanValue)
deviation <- sd(pounds)
print(deviation)
## We'll add a line on the plot to show one standard deviation above
## the mean (the top of the normal range)...
abline(h = meanValue + deviation)
#### Hail to the sailor that brought us that 50,000-pound payday!  ####
## Now try adding a line on the plot to show one standard devation below the mean
## (the bottom of the normal range
abline(h = meanValue - deviation)
meanValue - deviation
# -------------------------------------
# 1. 	PIE Chart
# ---------
# Create data for the graph.
x <- c(21, 62, 10, 53)
labels <- c("London", "New York", "Singapore", "Mumbai")
# Plot the chart.
pie(x,labels = labels, col =
c("Red","Green","Blue","Yellow"))
legend("bottomleft",x,pch=16,legend = labels ,
col = c("Red","Green","Blue","Yellow"))
# Plot the chart.
pie(x,labels = round(piepercent,2), col =
c("Red","Green","Blue","Yellow"))
legend("bottomleft",x,pch=16,legend = labels ,
col = c("Red","Green","Blue","Yellow"))
(piepercent = (x / sum(x)) * 100)
# Plot the chart.
pie(x,labels = round(piepercent,2), col =
c("Red","Green","Blue","Yellow"))
legend("bottomleft",x,pch=16,legend = labels ,
col = c("Red","Green","Blue","Yellow"))
v <- c(47,53,31,58,36,43,22)
# Create the histogram.
hist(v,ylim=c(0,5),
xlab = "Weight",ylab="Frequency", col = "yellow",
border = "blue")
# Get the data points in form of a R vector.
rainfall <- c(799,1174.8,865.1,1334.6,635.4,918.5,685.5,998.6,784.2,985,882.8,1071)
# Create the histogram.
plot.ts(rainfall,xlab = "2012 Rainfall data",
ylab = "Meters Rainfall",col = "blue",
main = "Rainfall Plot")
plot(rainfall)
# Create the histogram.
plot.ts(rainfall,xlab = "2012 Rainfall data",
ylab = "Meters Rainfall",col = "blue",
main = "Rainfall Plot")
v <- c(7,12,28,3,41)
w <- c(9,14,24,8,50)
q <- c("V","W","X")
q <- c("V","W")
source('~/R_Analysis/Analysis/visualization.R', echo=TRUE)
v <- c(7,12,28,3,41)
w <- c(9,14,24,8,50)
q <- c("V","W")
# Plot the Line chart.
plot(v,type = "o",col = "blue")
plot(w,type = "o",col = "blue")
# Plot the Line chart.
plot(v,type = "o",col = "blue")
lines(w,type = "o",col = "red")
lines(c(20,30,25,35,44), type="o", col="Green")
# Plot the Line chart.
plot(v,type = "o",col = "blue")
lines(w,type = "o",col = "red")
lines(c(20,30,25,35,44), type="o", col="Green")
legend("topleft",q, pch = c(15,16,17),col = c("blue","red"))
# Create the data for the chart.
H <- c(7,12,28,3,55)
labels <- c("A","B","C","D","E")
# Plot the bar chart.
barplot(H,names.arg = labels ,
col = c("white","green","red","blue","cyan"),
ylim = c(0,60))
input <- mtcars[,c('mpg','cyl')]
print(head(input))
# cor(mtcars)
# Plot the chart.
boxplot(mpg ~ cyl, data = input,ylim = c(5,35),
xlab = "Number of Cylinders",
ylab = "Miles Per Gallon", main = "Mileage Data")
# ---------------------------------------
# 7.	Scatterplot
# ------
# Get the input values.
input <- mtcars[,c('wt','mpg')]
# Plot the chart for cars with weight between 2.5 to 5 and mileage between 15 and 30.
plot(x = input$wt,y = input$mpg,
xlab = "Weight",
ylab = "Milage",
xlim = c(2.5,5),
ylim = c(15,30),
main = "Weight vs Milage"
)
library(reshape2)
ggplot(df, aes(x=Country, y=value, color=variable)) + geom_line()
library(ggplot)
library(ggplot2)
df <- melt(conf_grp3, "Country")
source('~/R_Analysis/Analysis/covid19/Covid19_Analysis.R', echo=TRUE)
setwd("~/R_Analysis/Analysis/covid19")
source('~/R_Analysis/Analysis/covid19/Covid19_Analysis.R', echo=TRUE)
ggplot(df, aes(x=Country, y=value, color=variable)) + geom_line()
df
top_10 <- head(unique(country_wise$`Country/Region`),10)
conf_inf <- subset(covid19 , `Country/Region` %in% top_10 & Case_Type == 'Confirmed')
conf_rec <- subset(covid19 , `Country/Region` %in% top_10 & Case_Type == 'Recovered')
conf_dea <- subset(covid19 , `Country/Region` %in% top_10 & Case_Type == 'Deaths')
conf_act <- subset(covid19 , `Country/Region` %in% top_10 & Case_Type == 'Active')
(conf_inf_grp <- conf_inf %>% group_by(`Country/Region`) %>% summarise(Conf_Count = max(Cases)) %>%
arrange(desc(Conf_Count)))
(conf_rec_grp <- conf_rec %>% group_by(`Country/Region`) %>% summarise(Conf_Count = max(Cases)) %>%
arrange(desc(Conf_Count)))
(conf_dea_grp <- conf_dea %>% group_by(`Country/Region`) %>% summarise(Conf_Count = max(Cases)) %>%
arrange(desc(Conf_Count)))
(conf_act_grp <- conf_act %>% group_by(`Country/Region`) %>% summarise(Conf_Count = max(Cases)) %>%
arrange(desc(Conf_Count)))
colnames(conf_inf_grp)[1] <- "Country"
colnames(conf_rec_grp)[1] <- "Country"
colnames(conf_dea_grp)[1] <- "Country"
colnames(conf_act_grp)[1] <- "Country"
conf_grp1 <-merge(x = conf_inf_grp, y = conf_rec_grp, by = "Country")
conf_grp2 <-merge(x = conf_dea_grp, y = conf_act_grp, by = "Country")
conf_grp3 <-merge(x = conf_grp1, y = conf_grp2, by = "Country")
View(conf_grp3)
colnames(conf_grp3)[2] <- "Confirmed"
colnames(conf_grp3)[3] <- "Recovered"
colnames(conf_grp3)[4] <- "Deaths"
colnames(conf_grp3)[5] <- "Active"
library(reshape2)
library(ggplot2)
df <- melt(conf_grp3, "Country")
str(df)
View(df)
ggplot(df, aes(x=Country, y=value, color=variable)) + geom_line()
ggplot(df, aes(x=Country, y=value, color=variable)) + geom_line()
ggplot(df) + geom_line(aes(x=Country, y=value, color=variable))
ggplot(conf_grp3) + geom_line(aes(x=Country, y=value, color=variable))
ggplot(conf_grp3) + geom_line(aes(x=Country, y=Confirmed, color="Red"))
View(conf_grp3)
ggplot(data = conf_grp3, aes(x = Confirmed, y = Country, color = species_id)) +
geom_line()
ggplot(data = conf_grp3, aes(x = Confirmed, y = Country, color = Country)) +
geom_line()
plot(conf_grp3$Confirmed)
plot(conf_grp3$Confirmed, type = 'v')
plot(conf_grp3$Confirmed, type = 'o')
plot(conf_grp3['China',]$Confirmed, type = 'o')
plot(conf_grp3[,'China']$Confirmed, type = 'o')
ggplot(data = conf_grp3, aes(x = Confirmed, y = Country, color = Country)) +
geom_bar()
ggplot(data = conf_grp3, aes(x = Confirmed, y = Country, color = Country)) +
geom_bar(stat="identity")
ggplot(data = conf_grp3, aes(x = Country, y = Confirmed, color = Country)) +
geom_bar(stat="identity")
ggplot(data = conf_grp3, aes(x = Country, y = Date, color = Country)) +
geom_bar(stat="identity")
ggplot(data = conf_grp3, aes(x = Country, y = Confirmed, color = Country)) +
geom_bar(stat="identity")
df <- melt(conf_grp3, "Country")
df
ggplot(df, aes(fill=variable, y=value, x=Country)) +
geom_bar(position="stack", stat="identity")
ggplot(df, aes(fill=reorder(variable,-value), y=value, x=Country)) +
geom_bar(position="stack", stat="identity")
ggplot(df, aes(fill=variable, y=value, x=Country)) +
geom_bar(position="stack", stat="identity")
grandtotal<- covid19 %>% group_by(`Country/Region`, Case_Type) %>% summarize(N=n())
View(grandtotal)
brandpercentageA= conf_dea/conf_inf
# Fatality rate
conf_grp3
conf_grp3_Per <-   conf_grp3
conf_grp3_Per$Percent_Death <- conf_grp3_Per$Deaths / conf_grp3_Per$Deaths
conf_grp3_Per
conf_grp3_Per$Percent_Death <- conf_grp3_Per$Deaths / conf_grp3_Per$Confirmed
conf_grp3_Per
conf_grp3_Per$Percent_Death <- (conf_grp3_Per$Deaths / conf_grp3_Per$Confirmed) * 100
conf_grp3_Per
2281-48
2281-48-12
706-325-7
691-374
317/374
conf_grp3_Per$Percent_Reoccur <- (conf_grp3_Per$Active - (conf_grp3_Per$Confirmed - conf_grp3_Per$Recovered - conf_grp3_Per$Deaths) )*100
conf_grp3_Per
conf_grp3_Per$Percent_Reoccur <- (conf_grp3_Per$Active - conf_grp3_Per$Recovered - conf_grp3_Per$Deaths) *100
conf_grp3_Per
conf_grp3_Per$Percent_Reoccur <- (conf_grp3_Per$Active - (conf_grp3_Per$Recovered - conf_grp3_Per$Deaths)) *100
conf_grp3_Per
(conf_grp3_Per$Active - (conf_grp3_Per$Recovered - conf_grp3_Per$Deaths))
conf_grp3_Per$Recovered - conf_grp3_Per$Deaths
conf_grp3_Per$Percent_Reoccur <- null
conf_grp3_Per$Percent_Reoccur <- NA
conf_grp3_Per
conf_grp3_Per$Percent_Reoccur <- NULL
conf_grp3_Per
(conf_grp3_Per$Active - conf_grp3_Per$Recovered)
conf_grp3_Per[,1]
conf_grp3_Per[1,]
67781 - 50318 - 3056
50633 - 14407
677381 + 36226
conf_grp3_Per[1,]
67781 - 50318 - 3056
50633 - 14407
67781 + 36226
104007
conf_grp3_Per[1,]
50633 / 104007
conf_grp3_Per$Percent_Spread <- conf_grp3_Per$Active / (conf_grp3_Per$Confirmed + (conf_grp3_Per$Active -
(conf_grp3_Per$Confirmed - conf_grp3_Per$Recovered - conf_grp3_Per$Deaths)
)) *100
conf_grp3_Per
conf_grp3_Per$Percent_Recovery <- conf_grp3_Per$Recovered / (conf_grp3_Per$Confirmed +
(conf_grp3_Per$Active -
(conf_grp3_Per$Confirmed - conf_grp3_Per$Recovered - conf_grp3_Per$Deaths)
)) *100
conf_grp3_Per
datatable(conf_grp3_Per)
conf_grp3_Per$Percent_Death <- Round((conf_grp3_Per$Deaths / conf_grp3_Per$Confirmed) * 100,2)
conf_grp3_Per$Percent_Death <- round((conf_grp3_Per$Deaths / conf_grp3_Per$Confirmed) * 100,2)
# Spread Rate
conf_grp3_Per$Percent_Spread <- round(conf_grp3_Per$Active /  (conf_grp3_Per$Confirmed +
(conf_grp3_Per$Active -
(conf_grp3_Per$Confirmed - conf_grp3_Per$Recovered - conf_grp3_Per$Deaths)
)) *100,2)
# Recovery Rate
conf_grp3_Per$Percent_Recovery <- round(conf_grp3_Per$Recovered / (conf_grp3_Per$Confirmed +
(conf_grp3_Per$Active -
(conf_grp3_Per$Confirmed - conf_grp3_Per$Recovered - conf_grp3_Per$Deaths)
)) *100,2)
datatable(conf_grp3_Per)
48.68+48.38+4.51
