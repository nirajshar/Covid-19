v[2:4] <- c(1,2,3)
v1[2:4] <- c(1,2,3)
print(v1)
V1[3] <- NA	 # Update with NA
v1[3] <- NA	 # Update with NA
print(v1)
list_data <- list("Red", "Green", 	c(21,32,11), TRUE, 51.23, 119.1)
print(list_data)
class(list_data)
print(list_data[[1]])
print(list_data[1])
print(list_data[[3]])
print(list_data[[3]][2])
#Naming a List
list_data <- list(c("Jan","Feb","Mar"), matrix(c(3,9,5,1,-2,8),nrow = 2), list("green",12.3))
print(list_data)
#Give names to the elements in the list.
names(list_data) <- c("1st Quarter", "A_Matrix", "A Inner list")
print(list_data)
list_data$`1st Quarter`
#Updating a List
list_data[[3]] <- "updated element"
print(list_data[3])
#Deleting a List Element
list_data <- list_data[-4]
print(list_data)
#Deleting a List Element
list_data <- list_data[[-3]]
#Deleting a List Element
list_data <- list_data[-3]
print(list_data)
list_data[1] <- NULL
print(list_data)
#Merging a List
# Create two lists.
list1 <- list(1,2,3)
list2 <- list("Sun","Mon","Tue")
# Merge the two lists.
merged.list <- c(list1,list2)
# Print the merged list.
print(merged.list)
n <- "Hello"
print(n)
class(n)
n <- c(list(1,2,3),1,matrix1)
print(n)
n <- c(matrix1,list(1,2,3),1)
print(n)
# Create lists.
list1 <- list(1:5)
list2 <-list(10:14)
# Convert the lists to vectors.
v1 <- unlist(list1)
v2 <- unlist(list2)
# Now add the vectors
result <- v1+v2
print(result)
#Elements are arranged sequentially by row.
M <- matrix(c(3:14), ncol=3, nrow = 4, byrow = TRUE)
print(M)
#Elements are arranged sequentially by column.
N <- matrix(c(3:14), nrow = 4, byrow = FALSE)
print(N)
rownames = c("row1", "row2", "row3", "row4")
colnames = c("col1", "col2", "col3")
P <- matrix(c(3:14), nrow = 4, byrow = TRUE, dimnames = list(rownames, colnames))
print(P)
print(P[1,3])
print(P['row1','col3'])
print(P[2,])
print(P[,3])
#Create two vectors of different length
vector1 <- c(5,9,3)
vector2 <- c(10,11,12,13,14,15)
result <- array(c(vector1, vector2),dim = c(3,3,2))
print(result)
result[,,1]
result[2,2,1]
result[,,1][2,2]
vector1 <- c(5,9,3)
vector2 <- c(10,11,12,13,14,15)
col <- c("COL1","COL2","COL3")
row <- c("ROW1","ROW2","ROW3")
mat <- c("Matrix1","Matrix2")
result <- array(c(vector1,vector2), dim = c(3,3,2), dimnames = list(row, col,mat))
print(result)
#Create two vectors of different lengths.
vector1 <- c(9,1,0)
vector2 <- c(6,0,11,3,14,1,2,6,9)
array1 <- array(c(vector1,vector1), dim = c(3,3,2))
vector3 <- c(9,1,0)
vector4 <- c(6,0,11,3,14,1,2,6,9)
array2 <- array(c(vector3,vector4), dim = c(3,3,2))
matrix1 <- array1[,,2]
matrix2 <- array2[,,2]
print(class(matrix1))
result <- matrix1+matrix2
print(result)
data <- c("East","West", "East","North", "North","East", "West","West",
"West","East", "North")
print(data)
factor_data <- factor(data)
print(factor_data)
nlevels(factor_data)
#Reorder the levels
new_order_data <- factor(factor_data,levels = c("East","West","North"))
print(new_order_data)
print(v)
#Generating factor levels
#Syntax: gl(n, k, labels)
v <- gl(3, 4, labels = c("Tampa", "Seattle","Boston"))
print(v)
emp.data <- data.frame( emp_id = c (1:5),
emp_name = c("Rick", "Dan", "Michelle","Ryan","Gary"),
salary = c(623.3, 515.2, 611.0, 729.0,843.25),
start_date = as.Date( c("2012-01-01","2013-09-23","2014-11-15","2014-05-11","2015-03-27")),
stringsAsFactors = FALSE)
# Print the data frame.
print(emp.data)
str(emp.data)
summary(emp.data)
quantile(emp.data$emp_id,0.1)
ncol(emp.data)
nrow(emp.data)
dim(emp.data)
attributes(emp.data)
print(emp.data$emp_name)
print(emp.data[1:2,])
result <- emp.data[c(3,5),c(2,4)]
print(result)
#Add the "dept" coulmn.
emp.data$dept <- c('IT' , 'Operations' , 'IT' ,'HR', 'Finance')
print(emp.data)
emp.newdata <- data.frame(
emp_id = c (6:8),
emp_name = c("Rasmi","Pranab","Tusar"),
salary = c(578.0,722.5,632.8),
start_date = as.Date(c("2013-05-21","2013-07-30","2014-06-17")),
dept = c("IT","Operations","Finance"),
stringsAsFactors = FALSE
)
# Bind the two data frames.
emp.finaldata <- rbind(emp.data,emp.newdata)
print(emp.finaldata)
city <-c("Tampa", "Seattle","Hartford", "Denver")
state <- c("FL","WA","CT","CO")
zipcode <- c(33602,98104,06161,80294)
addresses <- cbind(city,state,zipcode)
print(addresses)
new.address <- data.frame(city = c("Lowry","Charlotte"),
state = c("CO","FL"),
zipcode = c("80230","33949"),
stringsAsFactors = FALSE)
Final <- rbind(addresses,new.address)
print(Final)
is.data.frame(Final)
limbs <- c(4, 3, 4, 3, 2, 4, 4, 4)
names(limbs) <- c('One-Eye', 'Peg-Leg', 'Smitty', 'Hook', 'Scooter',
'Dan', 'Mikey', 'Jack Sparrow')
print(limbs)
#An average closer to 4 would be nice, but this will have to do.
mean(limbs)
## Here's a barplot of that vector:
barplot(limbs)
## The abline function can take an h parameter with a value at which to draw a horizontal line,
## or a v parameter for a vertical line. When it's called, it updates the previous plot.
abline(h=mean(limbs))
limbs <- c(4, 3, 4, 3, 2, 4, 4, 14)
names(limbs) <- c('One-Eye', 'Peg-Leg', 'Smitty', 'Hook','Scooter', 'Dan',
'Mikey', 'Davy Jones')
mean(limbs)
barplot(limbs)
## It may be factually accurate to say that our crew has an average of 4.75 limbs,
## but it's probably also misleading.
abline(h=mean(limbs))
median(limbs)
abline(h=median(limbs))
pounds <- c(45000, 50000, 35000, 40000, 35000, 45000, 10000, 15000)
names(pounds) <- c('One-Eye', 'Peg-Leg','Hook','Scooter','Davy',
'Mikey','Smitty', 'Dan')
print(pounds)
barplot(pounds)
## Let's see a plot showing the mean value:
meanValue <- mean(pounds)
print(meanValue)
deviation <- sd(pounds)
print(deviation)
## We'll add a line on the plot to show one standard deviation above
## the mean (the top of the normal range)...
abline(h = meanValue + deviation)
#### Hail to the sailor that brought us that 50,000-pound payday!  ####
## Now try adding a line on the plot to show one standard devation below the mean
## (the bottom of the normal range
abline(h = meanValue - deviation)
meanValue - deviation
# -------------------------------------
# 1. 	PIE Chart
# ---------
# Create data for the graph.
x <- c(21, 62, 10, 53)
labels <- c("London", "New York", "Singapore", "Mumbai")
# Plot the chart.
pie(x,labels = labels, col =
c("Red","Green","Blue","Yellow"))
legend("bottomleft",x,pch=16,legend = labels ,
col = c("Red","Green","Blue","Yellow"))
# Plot the chart.
pie(x,labels = round(piepercent,2), col =
c("Red","Green","Blue","Yellow"))
legend("bottomleft",x,pch=16,legend = labels ,
col = c("Red","Green","Blue","Yellow"))
(piepercent = (x / sum(x)) * 100)
# Plot the chart.
pie(x,labels = round(piepercent,2), col =
c("Red","Green","Blue","Yellow"))
legend("bottomleft",x,pch=16,legend = labels ,
col = c("Red","Green","Blue","Yellow"))
v <- c(47,53,31,58,36,43,22)
# Create the histogram.
hist(v,ylim=c(0,5),
xlab = "Weight",ylab="Frequency", col = "yellow",
border = "blue")
# Get the data points in form of a R vector.
rainfall <- c(799,1174.8,865.1,1334.6,635.4,918.5,685.5,998.6,784.2,985,882.8,1071)
# Create the histogram.
plot.ts(rainfall,xlab = "2012 Rainfall data",
ylab = "Meters Rainfall",col = "blue",
main = "Rainfall Plot")
plot(rainfall)
# Create the histogram.
plot.ts(rainfall,xlab = "2012 Rainfall data",
ylab = "Meters Rainfall",col = "blue",
main = "Rainfall Plot")
v <- c(7,12,28,3,41)
w <- c(9,14,24,8,50)
q <- c("V","W","X")
q <- c("V","W")
source('~/R_Analysis/Analysis/visualization.R', echo=TRUE)
v <- c(7,12,28,3,41)
w <- c(9,14,24,8,50)
q <- c("V","W")
# Plot the Line chart.
plot(v,type = "o",col = "blue")
plot(w,type = "o",col = "blue")
# Plot the Line chart.
plot(v,type = "o",col = "blue")
lines(w,type = "o",col = "red")
lines(c(20,30,25,35,44), type="o", col="Green")
# Plot the Line chart.
plot(v,type = "o",col = "blue")
lines(w,type = "o",col = "red")
lines(c(20,30,25,35,44), type="o", col="Green")
legend("topleft",q, pch = c(15,16,17),col = c("blue","red"))
# Create the data for the chart.
H <- c(7,12,28,3,55)
labels <- c("A","B","C","D","E")
# Plot the bar chart.
barplot(H,names.arg = labels ,
col = c("white","green","red","blue","cyan"),
ylim = c(0,60))
input <- mtcars[,c('mpg','cyl')]
print(head(input))
# cor(mtcars)
# Plot the chart.
boxplot(mpg ~ cyl, data = input,ylim = c(5,35),
xlab = "Number of Cylinders",
ylab = "Miles Per Gallon", main = "Mileage Data")
# ---------------------------------------
# 7.	Scatterplot
# ------
# Get the input values.
input <- mtcars[,c('wt','mpg')]
# Plot the chart for cars with weight between 2.5 to 5 and mileage between 15 and 30.
plot(x = input$wt,y = input$mpg,
xlab = "Weight",
ylab = "Milage",
xlim = c(2.5,5),
ylim = c(15,30),
main = "Weight vs Milage"
)
head(CH_Province,10) %>%
ggplot(aes(x=`Province/State`, y=Count)) +
geom_bar(stat = "identity")
covid19 <- read.xlsx('COVID-19.xlsx')
setwd("~/R_Analysis/Analysis/covid19")
covid19 <- read.xlsx('COVID-19.xlsx')
library(ggplot2)
library(caTools)
library(dplyr)
library(openxlsx)
covid19 <- read.xlsx('COVID-19.xlsx')
print(covid19)
View(covid19)
dim(covid19)
str(covid19)
# Map sightings on World Map
covid19$Lat    <- as.numeric(as.character(covid19$Lat))
covid19$Long   <- as.numeric(as.character(covid19$Long))
covid19$`Country/Region` <- as.factor(covid19$`Country/Region`)
library(DT)
str(covid19)
country_wise <- covid19 %>% group_by(`Country/Region`, Case_Type) %>%
dplyr::summarize(Count = max(Cases)) %>% arrange(desc(Count))
datatable(country_wise)
# Plot New Active cases
covid19$Date <- as.Date(covid19$Date, origin = "1899-12-30")
covid19$Last_Update_Date <- as.Date(covid19$Last_Update_Date, origin = "1899-12-30")
head(CH_Province,10) %>%
ggplot(aes(x=`Province/State`, y=Count)) +
geom_bar(stat = "identity")
# Spread in China
CH <- subset(covid19 , `Country/Region` == 'China' & Case_Type == 'Confirmed')
View(CH)
CH_Province <- CH %>% group_by(`Province/State`, Case_Type) %>%
summarise(Count=max(Cases)) %>%
arrange(desc(Count))
head(CH_Province,10) %>%
ggplot(aes(x=`Province/State`, y=Count)) +
geom_bar(stat = "identity")
IN <- subset(covid19 , `Country/Region` == 'India' & Case_Type == 'Confirmed')
View(IN)
IN_Province <- IN %>% group_by(`Province/State`, Case_Type) %>%
summarise(Count=max(Cases)) %>%
arrange(desc(Count))
View(IN_Province)
head(IN_Province,10) %>%
ggplot(aes(x=`Province/State`, y=Count)) +
geom_bar(stat = "identity")
head(CH_Province,10) %>%
ggplot(aes(x=`Province/State`, y=Count)) +
geom_bar(stat = "identity")
CH_Hubei <- subset(covid19 , `Country/Region` == 'China' & `Province/State` == 'Hubei' & Case_Type == 'Confirmed')
View(CH_Hubei)
CH_Hubei %>%
ggplot(aes(x=`Province/State`, y=Count))+
geom_curve(Date, Cases)
CH_Hubei %>%
ggplot(aes(x=Date, y=Cases))+
geom_curve(Date, Cases)
ggplot(data=CH_Hubei, aes(x=Date, y=Cases, group=`Province/State`, colour=`Province/State`)) +
geom_line() +
geom_point()
ggplot(data=CH_Hubei,
aes(x=Date, y=Cases, colour=`Province/State`)) +
geom_line()
top_10_countries %>%
ggplot(aes(Date,Cases, color = `Country/Region`)) +
geom_line()
top_10_countries <- subset(covid19 , `Country/Region` %in% top_10 & Case_Type == 'Confirmed')
top_10_countries <- subset(covid19 , `Country/Region` %in% top_10 & Case_Type == 'Confirmed')
country_wise <- covid19 %>% group_by(`Country/Region`, Case_Type) %>%
dplyr::summarize(Count = max(Cases)) %>% arrange(desc(Count))
datatable(country_wise)
top_10 <- head(unique(country_wise$`Country/Region`),10)
top_10_countries <- subset(covid19 , `Country/Region` %in% top_10 & Case_Type == 'Confirmed')
top_10_countries %>%
ggplot(aes(x=Date, y=Cases, group=`Country/Region`, color=as.factor(`Country/Region`))) +
geom_line() +
geom_point()
top_10_countries %>%
ggplot(aes(Date,Cases, color = `Country/Region`)) +
geom_line()
ggplot(data = top_10_countries,
aes(x = Date,y = Cases, color = `Country/Region`)) +
geom_line()
top_10_countries_RC <- subset(covid19 , `Country/Region` %in% top_10 & Case_Type == 'Recovered')
top_10_countries_RC %>% group_by(Date) %>%
mutate(percentage = Value/sum(Value)*100)
top_10_countries_RC %>% group_by(Date) %>%
mutate(percentage = Cases/sum(Cases)*100)
# Infected countries
ggplot(country_wise, aes(x="", y=Count, fill=brand)) +
geom_bar(stat="identity", width=1)
# Infected countries
ggplot(country_wise, aes(x="", y=Count, fill=`Country/Region`)) +
geom_bar(stat="identity", width=1)
# Infected countries
ggplot(country_wise, aes(x="", y=Count, fill=`Country/Region`)) +
geom_bar(stat="identity", width=1)+
coord_polar(theta="y")
# Infected countries
pie = ggplot(country_wise, aes(x="", y=Count, fill=`Country/Region`)) +
geom_bar(stat="identity", width=1)+
coord_polar(theta="y")
pie = pie + coord_polar("y", start=0) + geom_text(aes(label = paste0(round(value*100), "%")), position = position_stack(vjust = 0.5))
pie = pie + coord_polar("y", start=0) + geom_text(aes(label = paste0(round(Count*100), "%")), position = position_stack(vjust = 0.5))
# Infected countries
pie = ggplot(country_wise, aes(x="", y=Count, fill=`Country/Region`)) +
geom_bar(stat="identity", width=1)
pie = pie + coord_polar("y", start=0) + geom_text(aes(label = paste0(round(Count*100), "%")), position = position_stack(vjust = 0.5))
# Add color scale (hex colors)
pie = pie + scale_fill_manual(values=rainbow(length(`Country/Region`)))
country_wise$
# Add color scale (hex colors)
pie = pie + scale_fill_manual(values=rainbow(length(country_wise$`Country/Region`)))
# Remove labels and add title
pie = pie + labs(x = NULL, y = NULL, fill = NULL, title = "Phones - Market Share")
# Tidy up the theme
pie = pie + theme_classic() + theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust = 0.5, color = "#666666"))
pie
# Infected countries
pie = ggplot(country_wise, aes(x="", y=Count, fill=`Country/Region`)) +
geom_bar(stat="identity", width=1)
pie = pie + coord_polar("y", start=0) + geom_text(aes(label = paste0(round(Count*100), "%")), position = position_stack(vjust = 0.5))
pie
# Infected countries
pie = ggplot(country_wise, aes(x="", y=Count, fill=`Country/Region`)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)
pie
country_wise
# Infected countries
Infected_Countries <- subset(country_wise, Case_Type == 'Confirmed')
Infected_Countries
ggplot(Infected_Countries, aes(x="", y=Count, fill=`Country/Region`)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)
# Top 10 Infected Countries
top_10_Inf_countries <- head(Infected_Countries,10)
ggplot(top_10_Inf_countries, aes(x="", y=Count, fill=`Country/Region`)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)
scale_fill_manual(values=c(#808080	, #800000	, #808000	, #000080	, #800080	,"#55DDE0", "#33658A", "#2F4858", "#F6AE2D", "#F26419", "#999999"))
ggplot(top_10_Inf_countries, aes(x="", y=Count, fill=`Country/Region`)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
scale_fill_manual(values=c("#808080"	, "#800000"	, "#808000"	," #000080"	, "#800080"	,
"#55DDE0", "#33658A", "#2F4858", "#F6AE2D", "#F26419", "#999999"))
ggplot(top_10_Inf_countries, aes(x="", y=Count, fill=`Country/Region`)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
scale_fill_manual(values=c("#808080"	, "#800000"	, "#808000"	," "#000080"	, "#800080"	,
"#55DDE0", "#33658A", "#2F4858", "#F6AE2D", "#F26419", "#999999"))
ggplot(top_10_Inf_countries, aes(x="", y=Count, fill=`Country/Region`)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
scale_fill_manual(values=c("#808080"	, "#800000"	, "#808000"	, "#000080"	, "#800080"	,
"#55DDE0", "#33658A", "#2F4858", "#F6AE2D", "#F26419", "#999999"))
ggplot(top_10_Inf_countries, aes(x="", y=Count, fill=`Country/Region`)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
scale_fill_manual(values=c("#808000"	,"#808080"	, "#800000"	,  "#000080"	, "#800080"	,
"#55DDE0", "#33658A", "#2F4858", "#F6AE2D", "#F26419", "#999999"))
top_10_countries_RC %>% group_by(Date) %>%
mutate(percentage = Cases/sum(Cases)*100)
top_10
conf_inf <- subset(covid19 , `Country/Region` %in% top_10 & Case_Type == 'Confirmed')
conf_rec <- subset(covid19 , `Country/Region` %in% top_10 & Case_Type == 'Recovered')
View(conf_inf)
conf_inf_grp <- conf_inf %>% group_by(`Country/Region`) %>% summarise(Conf_Count = max(Cases))
conf_inf_grp <- conf_inf %>% group_by(`Country/Region`) %>% summarise(Conf_Count = max(Cases)) %>%
arrange(desc(Conf_Count))
(conf_inf_grp <- conf_inf %>% group_by(`Country/Region`) %>% summarise(Conf_Count = max(Cases)) %>%
arrange(desc(Conf_Count)))
(conf_rec_grp <- conf_rec %>% group_by(`Country/Region`) %>% summarise(Conf_Count = max(Cases)) %>%
arrange(desc(Conf_Count)))
conf_grp <-merge(x=conf_inf_grp,y=conf_rec_grp,by=`Country/Region`)
conf_grp <-merge(x=conf_inf_grp,y=conf_rec_grp,by="`Country/Region`")
colnames(conf_inf_grp)[1] <- "Country"
colnames(conf_rec_grp)[1] <- "Country"
conf_grp <-merge(x=conf_inf_grp,y=conf_rec_grp,by="Country")
View(conf_inf)
View(conf_grp)
conf_dea <- subset(covid19 , `Country/Region` %in% top_10 & Case_Type == 'Deaths')
conf_act <- subset(covid19 , `Country/Region` %in% top_10 & Case_Type == 'Active')
(conf_dea_grp <- conf_dea %>% group_by(`Country/Region`) %>% summarise(Conf_Count = max(Cases)) %>%
arrange(desc(Conf_Count)))
(conf_act_grp <- conf_dea %>% group_by(`Country/Region`) %>% summarise(Conf_Count = max(Cases)) %>%
arrange(desc(Conf_Count)))
conf_grp1 <-merge(x = conf_inf_grp, y = conf_rec_grp, by = "Country")
View(conf_rec_grp)
colnames(conf_dea_grp)[1] <- "Country"
colnames(conf_act_grp)[1] <- "Country"
View(conf_inf_grp)
conf_grp2 <-merge(x = conf_dea_grp, y = conf_act_grp, by = "Country")
conf_grp3 <-merge(x = conf_grp1, y = conf_grp2, by = "Country")
View(conf_grp3)
conf_grp2
(conf_act_grp <- conf_act %>% group_by(`Country/Region`) %>% summarise(Conf_Count = max(Cases)) %>%
arrange(desc(Conf_Count)))
colnames(conf_act_grp)[1] <- "Country"
conf_grp1 <-merge(x = conf_inf_grp, y = conf_rec_grp, by = "Country")
conf_grp2 <-merge(x = conf_dea_grp, y = conf_act_grp, by = "Country")
conf_grp3 <-merge(x = conf_grp1, y = conf_grp2, by = "Country")
View(conf_grp3)
colnames(conf_inf_grp)[2] <- "Confirmed"
colnames(conf_rec_grp)[3] <- "Recovered"
colnames(conf_dea_grp)[4] <- "Deaths"
colnames(conf_act_grp)[5] <- "Active"
View(conf_dea_grp)
colnames(conf_grp3)[2] <- "Confirmed"
colnames(conf_grp3)[3] <- "Recovered"
colnames(conf_grp3)[4] <- "Deaths"
colnames(conf_grp3)[5] <- "Active"
View(conf_grp3)
df[] <- lapply(conf_grp3, unlist)
str(df)
df[] <- lapply(conf_grp3, unlist)
conf_grp3
View(conf_grp3)
df <- melt(conf_grp3, "Country")
install.packages('reshape2')
library(reshape2)
df <- melt(df, "Date")
df <- melt(conf_grp3, "Country")
source('~/R_Analysis/Analysis/covid19/Covid19_Analysis.R', echo=TRUE)
str(df)
ggplot(df, aes(x=Country, y=value, color=variable)) + geom_line()
View(df)
